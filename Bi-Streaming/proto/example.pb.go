// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_example_72c2808da48575f7, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Reply struct {
	Answer               bool     `protobuf:"varint,1,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_example_72c2808da48575f7, []int{1}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (dst *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(dst, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetAnswer() bool {
	if m != nil {
		return m.Answer
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "example.Request")
	proto.RegisterType((*Reply)(nil), "example.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleServiceClient interface {
	StreamingIsEven(ctx context.Context, opts ...grpc.CallOption) (ExampleService_StreamingIsEvenClient, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) StreamingIsEven(ctx context.Context, opts ...grpc.CallOption) (ExampleService_StreamingIsEvenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExampleService_serviceDesc.Streams[0], "/example.ExampleService/StreamingIsEven", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceStreamingIsEvenClient{stream}
	return x, nil
}

type ExampleService_StreamingIsEvenClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type exampleServiceStreamingIsEvenClient struct {
	grpc.ClientStream
}

func (x *exampleServiceStreamingIsEvenClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceStreamingIsEvenClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
type ExampleServiceServer interface {
	StreamingIsEven(ExampleService_StreamingIsEvenServer) error
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_StreamingIsEven_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).StreamingIsEven(&exampleServiceStreamingIsEvenServer{stream})
}

type ExampleService_StreamingIsEvenServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type exampleServiceStreamingIsEvenServer struct {
	grpc.ServerStream
}

func (x *exampleServiceStreamingIsEvenServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceStreamingIsEvenServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingIsEven",
			Handler:       _ExampleService_StreamingIsEven_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_example_72c2808da48575f7) }

var fileDescriptor_example_72c2808da48575f7 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xa4, 0xb9,
	0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0x25, 0x79, 0x2e, 0xd6, 0xa0, 0xd4, 0x82, 0x9c,
	0x4a, 0x21, 0x31, 0x2e, 0xb6, 0xc4, 0xbc, 0xe2, 0xf2, 0xd4, 0x22, 0xb0, 0x2c, 0x47, 0x10, 0x94,
	0x67, 0xe4, 0xcd, 0xc5, 0xe7, 0x0a, 0x31, 0x28, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8,
	0x92, 0x8b, 0x3f, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x37, 0x33, 0x2f, 0xdd, 0xb3, 0xd8, 0xb5, 0x2c,
	0x35, 0x4f, 0x48, 0x40, 0x0f, 0x66, 0x37, 0xd4, 0x26, 0x29, 0x3e, 0x24, 0x91, 0x82, 0x9c, 0x4a,
	0x25, 0x06, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xd3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x38, 0xfc, 0x7c, 0x08, 0xab, 0x00, 0x00, 0x00,
}
