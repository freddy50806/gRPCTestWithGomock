// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/freddy50806/gRPCTestWithGomock/Bi-Streaming/proto (interfaces: ExampleServiceClient,ExampleService_StreamingIsEvenClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	proto "github.com/freddy50806/gRPCTestWithGomock/Bi-Streaming/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockExampleServiceClient is a mock of ExampleServiceClient interface
type MockExampleServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExampleServiceClientMockRecorder
}

// MockExampleServiceClientMockRecorder is the mock recorder for MockExampleServiceClient
type MockExampleServiceClientMockRecorder struct {
	mock *MockExampleServiceClient
}

// NewMockExampleServiceClient creates a new mock instance
func NewMockExampleServiceClient(ctrl *gomock.Controller) *MockExampleServiceClient {
	mock := &MockExampleServiceClient{ctrl: ctrl}
	mock.recorder = &MockExampleServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExampleServiceClient) EXPECT() *MockExampleServiceClientMockRecorder {
	return m.recorder
}

// StreamingIsEven mocks base method
func (m *MockExampleServiceClient) StreamingIsEven(arg0 context.Context, arg1 ...grpc.CallOption) (proto.ExampleService_StreamingIsEvenClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamingIsEven", varargs...)
	ret0, _ := ret[0].(proto.ExampleService_StreamingIsEvenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamingIsEven indicates an expected call of StreamingIsEven
func (mr *MockExampleServiceClientMockRecorder) StreamingIsEven(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamingIsEven", reflect.TypeOf((*MockExampleServiceClient)(nil).StreamingIsEven), varargs...)
}

// MockExampleService_StreamingIsEvenClient is a mock of ExampleService_StreamingIsEvenClient interface
type MockExampleService_StreamingIsEvenClient struct {
	ctrl     *gomock.Controller
	recorder *MockExampleService_StreamingIsEvenClientMockRecorder
}

// MockExampleService_StreamingIsEvenClientMockRecorder is the mock recorder for MockExampleService_StreamingIsEvenClient
type MockExampleService_StreamingIsEvenClientMockRecorder struct {
	mock *MockExampleService_StreamingIsEvenClient
}

// NewMockExampleService_StreamingIsEvenClient creates a new mock instance
func NewMockExampleService_StreamingIsEvenClient(ctrl *gomock.Controller) *MockExampleService_StreamingIsEvenClient {
	mock := &MockExampleService_StreamingIsEvenClient{ctrl: ctrl}
	mock.recorder = &MockExampleService_StreamingIsEvenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExampleService_StreamingIsEvenClient) EXPECT() *MockExampleService_StreamingIsEvenClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockExampleService_StreamingIsEvenClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockExampleService_StreamingIsEvenClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).Context))
}

// Header mocks base method
func (m *MockExampleService_StreamingIsEvenClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).Header))
}

// Recv mocks base method
func (m *MockExampleService_StreamingIsEvenClient) Recv() (*proto.Reply, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockExampleService_StreamingIsEvenClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockExampleService_StreamingIsEvenClient) Send(arg0 *proto.Request) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockExampleService_StreamingIsEvenClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockExampleService_StreamingIsEvenClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockExampleService_StreamingIsEvenClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockExampleService_StreamingIsEvenClient)(nil).Trailer))
}
